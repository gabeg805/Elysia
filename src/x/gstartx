#!/bin/bash
## 
## Created By: Gabriel Gonzalez (contact me at gabeg@bu.edu) 
## 
## 
## Name:
## 
##     gxstartx
## 
## 
## Syntax: 
## 
##     gxstartx [DISPLAY] [WM]
## 
## 
## Purpose:
## 
##     Initialize an X session with the specified window manager.
## 
## 
## Keywords:
## 
##     DISPLAY - Display to start the X session on
##     WM      - Window manager to use for the X session 
## 
## 
## Functions:
## 
##     helpScreen           - displays the help screen
##     main - the main function
## 
## 
## File Structure:
## 
##     * Print Functions
##     * Test Functions
##     * Action Functions
##     * Main Function
##     * Objective
## 
## 
## Modification History:
## 	
##     gabeg MON DAY YEAR <> created
## 
## **********************************************************************************



## ###################################
## ##### DISPLAY THE HELP SCREEN #####
## ###################################

## Displays the help screen
function helpScreen {
    
    ## Help Message
    ## ------------
    
    local file="$0"
    local first=(`sed 's/^$/  /; s/^/\`/' "$file" | grep -o -E '^\`..'`)
    local j=0
    
    for i in "${first[@]}"; do 
        if [[ "$i" == '`##' || "$i" == '`#!' ]]; then :; else break; fi
        j=$[ $j + 1 ]
    done
    
    head -"$j" "$file" 
    exit
}



## #####################################
## ##### CHECK USER INPUT VALIDITY #####
## #####################################

## Check if the input display is valid
function isDisplay {
    
    ## Input display
    local disp="$1"
    
    ## Check display for display format (':0')
    local flag=false
    if [ ${#disp} -eq 2 ]; then
        [[ "${disp:0:1}" == ':' ]] && flag=true
    fi
    
    ## Return result
    echo $flag
}



## Check if input window manager is valid
function isWM {
    
    ## Location containing valid WM sessions
    local wmdir='/usr/share/xsessions'
    
    ## Check for correct WM in /usr/share/xsessions/
    local flag=false
    for i in `ls -1 "$wmdir"`; do
        local session=`echo $i | sed 's/.desktop//'`
        [[ "$1" == "$session" ]] && flag=true
    done
    
    ## Return result
    echo $flag
}



## ################################################
## ##### DETERMINE DISPLAY AND WINDOW MANAGER #####
## ################################################

## Return an open display
function findOpenDisplay {
    
    ## Find an open display
    local d=0
    while true ; do
        [ -e /tmp/.X$d-lock ] || break
        d=$[ $d + 1 ]
    done
    
    ## Return display
    echo ":$d"
}



## Get valid display
function getDisplay {
    
    ## Check input for valid display
    if `isDisplay "$1"`; then
        local display="$1"
    else
        if `isDisplay "$2"`; then
            local display="$2"
        else
            local display=`findOpenDisplay`
        fi
    fi
    
    ## Log and return set display 
    echo "Using open display '$display'" >> "$log"
    echo "$display"
}



## Get valid  window manager execution command
function getWM {
    
    ## Location containing valid WM sessions
    local wmdir='/usr/share/xsessions'
    
    ## Check input for valid window manager
    if `isWM "$1"`; then
        local window_manager="$1"
    else
        if `isWM "$2"`; then
            local window_manager="$2"
        else
            local window_manager=$default_wm
        fi
    fi
    
    ## Return the WM
    echo "Using window manager '$window_manager'" >> "$log"
    echo "$window_manager"
}



## ###################################
## ##### X SERVER AUTHENTICATION #####
## ###################################

## Return path of xinitrc file to use
function getXinit {
    
    ## Default locations for xinitrc file
    local usr_xinitrc="$HOME/.xinitrc"
    local sys_xinitrc='/etc/X11/xinit/xinitrc'
    
    ## Return the xinitrc file
    if [ -f "$usr_xinitrc" ]; then
        echo $usr_xinitrc
    else
        echo $sys_xinitrc
    fi
}



## Return path of xserverrc file to use
function getXserver {
    
    ## Default locations for xserverrc file
    local usr_serverrc="$HOME/.xserverrc"
    local sys_serverrc='/etc/X11/xinit/xserverrc'
    
    ## Return the xserverrc file
    if [ -f "$usr_serverrc" ]; then
        echo $usr_serverrc
    else
        echo $sys_serverrc
    fi
}



## Return the hostname
function getHostName {
    case `uname` in
        Linux*)
            if [ -z "`hostname --version 2>&1 | grep GNU`" ]; then
                local hostname=`hostname -f`
            else
                local hostname=`hostname`
            fi
            ;;
        *)
            local hostname=`hostname`
            ;;
    esac
    
    echo $hostname
}



# Create a file with auth information for the server. ':0' is a dummy.
function setServerCredentials {
    
    ## Set X authentication variables
    local dummy=0
    
    ## Authenticate the file
    trap "rm -f '$xserverauthfile'" HUP INT QUIT ILL TRAP KILL BUS TERM
    xauth -q -f "$xserverauthfile" <<< "add :$dummy . $mcookie"
}



# Add the same credentials to the client authority file
function setClientCredentials {
    
    ## Set X authentication variables
    local authdisplay=${display:-:0}
    local hostname=`getHostName`
    local removelist=
    local dummy=0    
    
    ## Authenticate the file
    for displayname in $authdisplay $hostname/unix$authdisplay; do
        authcookie=`xauth list "$displayname" \
        | sed -n "s/.*$hostname\/unix$authdisplay[[:space:]*].*[[:space:]*]//p"` 2>/dev/null;
        
        if [ "z${authcookie}" = "z" ] ; then
            xauth -q <<< "add $displayname . $mcookie"
            removelist="$displayname $removelist"
        else
            dummy=$[ $dummy + 1 ]
            xauth -q -f "$xserverauthfile" <<< "add :$dummy . $authcookie"
        fi
    done

    ## Log remove list
    if [[ "$removelist" =~ ^\ +$ || "$removelist" == '' ]]; then
        touch "$listlog"
    else
        echo "$removelist" > "$listlog"    
    fi
}



## Initiate file clean up 
function cleanUp {
    
    ## Remove list file
    if [ -s "$listlog" ]; then
        xauth remove <<< "$listlog"
        rm "$listlog"
    else
        rm "$listlog"
    fi
    
    ## Remove X server authentication file
    if [ ! -z "$xserverauthfile" ]; then
        rm -f "$xserverauthfile"
    fi    
}



## ##############################
## ##### START AN X SESSION ##### 
## ##############################

## Start the X session
function main {
    
    ## Unset variables
    unset DBUS_SESSION_BUS_ADDRESS
    unset SESSION_MANAGER
    
    ## Define default variables
    local dir="$HOME/.glm"
    local log="$dir/xstart.log"
    local listlog="$dir/xlist.log"
    local xlog="$dir/xserver.log"
    
    ## Begin logging
    if [ ! -d "$dir" ]; then mkdir "$dir"; fi
    echo -e "\n""Log begins on `date`" >> "$log"
    
    ## Set up variables for starting X
    local client=`getXinit`
    local clientargs=`getWM "$1" "$2"`
    local display=`getDisplay "$1" "$2"`
    local xserverauthfile=`mktemp -p /tmp serverauth.XXXXXXXXXX`
    local server=`getXserver`
    local serverargs=" -auth "${xserverauthfile}
    
    ## Set the X authority environment variable
    if [ -z "$XAUTHORITY" ]; then
        export XAUTHORITY="$HOME/.Xauthority"
    fi
    
    ## Generate the magic cookie for x authentication
    local mcookie=`/usr/bin/mcookie`
    if test x"$mcookie" = x; then
        echo "ERROR: Could not create cookie" >> "$log"
        exit 1
    fi
    
    ## Establish server and client credentials
    setServerCredentials 
    setClientCredentials 
    
    ## Start the X session
    xinit "$client" $clientargs -- "$server" $display $serverargs 
    
    ## Script clean up
    local retval=$?
    cleanUp 
    
    exit $retval
}



## -----------------------------------------
## Execute the command to start an X session
## -----------------------------------------

main "$@"
